version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: cell_therapy_db
      POSTGRES_USER: biotech_user
      POSTGRES_PASSWORD: secure_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data:/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U biotech_user -d cell_therapy_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Airflow
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.7.3
    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://biotech_user:secure_password_2024@postgres/cell_therapy_db
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://biotech_user:secure_password_2024@postgres/cell_therapy_db
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.7.3
    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://biotech_user:secure_password_2024@postgres/cell_therapy_db
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://biotech_user:secure_password_2024@postgres/cell_therapy_db
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
    command: scheduler
    restart: always

  # Airflow Worker
  airflow-worker:
    image: apache/airflow:2.7.3
    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://biotech_user:secure_password_2024@postgres/cell_therapy_db
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://biotech_user:secure_password_2024@postgres/cell_therapy_db
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
    command: celery worker
    restart: always

  # Streamlit Dashboard
  streamlit-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    ports:
      - "8501:8501"
    volumes:
      - ./data:/app/data
      - ./config:/app/config
    environment:
      - DATABASE_URL=postgresql://biotech_user:secure_password_2024@postgres:5432/cell_therapy_db
    depends_on:
      - postgres
    restart: always

  # Jupyter Notebook Server
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
      - ./src:/home/jovyan/src
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=biotech2024
    depends_on:
      - postgres
    restart: always

  # Monitoring Dashboard (Grafana)
  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - postgres
    restart: always

volumes:
  postgres_data:
  grafana_data: 